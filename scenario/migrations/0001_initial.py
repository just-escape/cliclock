# Generated by Django 4.2.4 on 2025-04-06 10:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Instance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=64, unique=True)),
                ("name", models.CharField(max_length=64)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "NOT_STARTED"),
                            ("PLAYING", "PLAYING"),
                            ("PAUSED", "PAUSED"),
                            ("VOTING", "VOTING"),
                            ("FINISHED", "FINISHED"),
                        ],
                        max_length=64,
                    ),
                ),
                (
                    "modal_title",
                    models.CharField(
                        max_length=128, verbose_name="Modal title (status != PLAYING)"
                    ),
                ),
                (
                    "modal_text",
                    models.TextField(verbose_name="Modal text (status != PLAYING)"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("name_en", models.CharField(max_length=64)),
                ("description", models.TextField()),
                ("description_en", models.TextField()),
                ("image", models.ImageField(upload_to="item")),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=64, unique=True)),
                ("name", models.CharField(max_length=64)),
                ("avatar", models.ImageField(upload_to="character")),
                (
                    "team",
                    models.CharField(
                        choices=[
                            ("SHERLOCK", "SHERLOCK"),
                            ("MORIARTY", "MORIARTY"),
                            ("NEUTRAL", "NEUTRAL"),
                        ],
                        max_length=64,
                    ),
                ),
                ("nth_place", models.IntegerField(default=None, null=True)),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scenario.instance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField(db_index=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="scenario.item"
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scenario.player",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status_a",
                    models.CharField(
                        choices=[("TRADING", "TRADING"), ("ACCEPTED", "ACCEPTED")],
                        max_length=64,
                    ),
                ),
                (
                    "status_b",
                    models.CharField(
                        choices=[("TRADING", "TRADING"), ("ACCEPTED", "ACCEPTED")],
                        max_length=64,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "peer_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_a_trade",
                        to="scenario.player",
                    ),
                ),
                (
                    "peer_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_b_trade",
                        to="scenario.player",
                    ),
                ),
                (
                    "player_items_a",
                    models.ManyToManyField(
                        blank=True,
                        related_name="peer_a_player_item",
                        to="scenario.playeritem",
                    ),
                ),
                (
                    "player_items_b",
                    models.ManyToManyField(
                        blank=True,
                        related_name="peer_b_player_item",
                        to="scenario.playeritem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Puzzle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=64, unique=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("KEY_RIDDLE_BOUNTY", "KEY_RIDDLE_BOUNTY"),
                            ("KEY_BOUNTY", "KEY_BOUNTY"),
                            ("BOUNTY", "BOUNTY"),
                        ],
                        max_length=64,
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("name_en", models.CharField(max_length=64)),
                ("picture", models.ImageField(upload_to="puzzle")),
                ("intro", models.TextField()),
                ("intro_en", models.TextField()),
                ("riddle", models.TextField()),
                ("riddle_en", models.TextField()),
                ("answer", models.CharField(max_length=64)),
                ("answer_en", models.CharField(max_length=64)),
                ("final", models.TextField()),
                ("final_en", models.TextField()),
                (
                    "bounty",
                    models.ManyToManyField(
                        blank=True, related_name="bounty_puzzles", to="scenario.item"
                    ),
                ),
                (
                    "consumable_keys",
                    models.ManyToManyField(
                        blank=True,
                        related_name="consumable_keys_puzzles",
                        to="scenario.item",
                    ),
                ),
                (
                    "keys",
                    models.ManyToManyField(
                        blank=True, related_name="keys_puzzles", to="scenario.item"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerPuzzle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OBSERVED", "OBSERVED"),
                            ("UNLOCKED", "UNLOCKED"),
                            ("SOLVED", "SOLVED"),
                        ],
                        db_index=True,
                        max_length=64,
                    ),
                ),
                ("is_displayed", models.BooleanField(default=False)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scenario.player",
                    ),
                ),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scenario.puzzle",
                    ),
                ),
            ],
        ),
    ]
